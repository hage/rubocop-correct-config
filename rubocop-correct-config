#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

module Analyze
  # detect_* 系メソッドは配列を返し、その配列には以下のものが入っている
  # 0: 置換前
  # 1: 置換後
  #
  # ただし、処理できなかった時は nil を返す。

  def self.detect_wrong_name_space(opt, line)
    %r{#{opt.filename}: (\w+/(\w+)) has the wrong namespace - should be (\w+)}.match(line) do |m|
      [m[1], "#{m[3]}/#{m[2]}"]
    end
  end

  def self.detect_no_longer_exists(_opt, line)
    %r{^Error: The `(\w+/\w+)` cop no longer exists. Please use (.+?) instead\.}.match(line) do |m|
      origin = m[1]
      mods_line = m[2]
      mods = mods_line.split(%r{\s*, (?:and/or)?\s*}).map{|x| x.strip[1..-2]}
      [origin, mods]
    end
  end

  def self.detect_renamed_cop(_opt, line)
    %r{The `(\w+/\w+)` cop has been renamed to `(\w+/\w+)`\.}.match(line) do |m|
      [m[1], m[2]]
    end
  end

  def self.detect_removed_cop(_opt, line)
    %r{The `(\w+/\w+)` cop has been removed\. Please use `(\w+/\w+)` instead.}.match(line) do |m|
      [m[1], m[2]]
    end
  end

  def self.detect_renamed_and_moved_cop(_opt, line)
    %r{The `(\w+/\w+)` cop has been renamed and moved to `(\w+/\w+)`.}.match(line) do |m|
      [m[1], m[2]]
    end
  end
end

class Option
  DEFAULT_CONFIG_FILE = '.rubocop.yml'

  def initialize(argv)
    opt = OptionParser.new
    @override = false
    opt.on('-o', '--override') {@override = true}
    @filename = opt.parse(argv)[0] || DEFAULT_CONFIG_FILE
  end
  attr_reader :override, :filename
end



def main
  _opt = Option.new(ARGV)
end

main if __FILE__ == $0
